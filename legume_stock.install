<?php
/**
 * Implements hook_disable().
 * Disable default views when module is disabled
 *
 * @ingroup legume_qtl
 */
function legume_stock_disable() {
  // Disable all default views provided by this module
}

/**
 * Implements hook_requirements().
 *
 * @ingroup legume_qtl
 */
function legume_stock_requirements($phase) {
  $requirements = array();
  if ($phase == 'install') {
    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['legume_qtl'] = array(
          'title' => "legume_qtl",
          'value' => "ERROR: Chado must be installed before this module can be enabled",
          'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}


/**
 * Implementation of hook_install().
 */
function legume_stock_install() {
  print "Creating custom tables.....\n";
  legume_stock_create_custom_tables();
  
  print "Creating MView stock_search.....\n";
  legume_stock_create_MView();
  
  print "Creating stock_search Views Integration.....\n";
  legume_stock_create_Integration();
  
  // Populate the MView
  $mview_id =  tripal_get_mview_id('gene');   
  print "Populating stock_search mview.....\n";
  tripal_populate_mview($mview_id);
  
  print "Install script completed.\n";
}

/**
 * Implementation of hook_uninstall().
 */
function legume_stock_uninstall() {
  // Drop the MView table if it exists
  $mview_id =  tripal_get_mview_id('stock_search');
  if ($mview_id) {
    tripal_delete_mview($mview_id);
  }
  
  // Remove Views Integration
  $delete_view = array(
    'table_name' => 'stock_search',
    'priority' => '-1',
  );
  tripal_remove_views_integration($delete_view); 
}


function legume_stock_create_custom_tables() {
  // custom table: stock_eimage table
  $schema = array (
    'table' => 'stock_eimage',
    'fields' => 
      array (
        'stock_eimage_id' =>
        array (
         'type' => 'serial',
          'not null' => true,
        ),
        'stock_id' => 
        array (
          'type' => 'int',
          'not null' => true,
        ),
        'eimage_id' => 
        array (
          'type' => 'int',
          'not null' => true,
        ),
      ),
    
    'indexes' => 
      array (
        'stock_eimage_indx0' => 
        array (
          0 => 'eimage_id',
        ),
        'featuremap_stock_indx2' => 
        array (
          0 => 'stock_id',
        ),
      ),
    'foreign keys' => 
      array (
        'eimage' => 
        array (
          'table' => 'eimage',
          'columns' => 
          array (
            'eimage_id' => 'eimage_id',
          ),
        ),
        'stock' => 
        array (
          'table' => 'stock',
          'columns' => 
          array (
            'stock_id' => 'stock_id',
          ),
        ),
      ),
    'primary key' => 
      array (
        0 => 'stock_eimage_id',
      ),
  );
  chado_create_custom_table('stock_eimage', $schema);

  // custom table: stock_phenotype 
  $schema = array (
    'table' => 'stock_phenotype',
    'fields' => 
      array (
        'stock_phenotype_id' =>
        array (
         'type' => 'serial',
          'not null' => true,
        ),
        'stock_id' => 
        array (
          'type' => 'int',
          'not null' => true,
        ),
        'phenotype_id' => 
        array (
          'type' => 'int',
          'not null' => true,
        ),
      ),
    
    'indexes' => 
      array (
        'stock_phenotype_indx0' => 
        array (
          0 => 'phenotype_id',
        ),
        'stock_phenotype_indx2' => 
        array (
          0 => 'stock_id',
        ),
      ),
    'foreign keys' => 
      array (
        'phenotype' => 
        array (
          'table' => 'phenotype',
          'columns' => 
          array (
            'phenotype_id' => 'phenotype_id',
          ),
        ),
        'stock' => 
        array (
          'table' => 'stock',
          'columns' => 
          array (
            'stock_id' => 'stock_id',
          ),
        ),
      ),
    'primary key' => 
      array (
        0 => 'stock_phenotype_id',
      ),
  );
  chado_create_custom_table('stock_phenotype', $schema);
  
  // Custom table: phenotypeprop
  array (
    'table' => 'phenotypeprop',
    'fields' => 
      array (
        'phenotypeprop_id' =>
          array (
           'type' => 'serial',
            'not null' => true,
          ),
        'phenotype_id' => 
          array (
            'type' => 'int',
            'not null' => true,
          ),
        'type_id' => 
          array (
            'type' => 'int',
            'not null' => true,
          ),
        'value' => 
          array (
            'type' => 'text',
            'not null' => false,
          ),
        'rank' => 
          array (
            'type' => 'int',
            'not null' => true,
          ),
         'cvalue' => 
          array (
            'type' => 'int',
            'not null' => true,
          ),
     ),
    
    'primary key' => 
      array (
        0 => 'phenotypeprop_id',
      ),
    'indexes' => 
      array (
        'stock_eimage_indx0' => 
        array (
          0 => 'eimage_id',
        ),
        'featuremap_stock_indx2' => 
        array (
          0 => 'stock_id',
        ),
      ),
    
    'foreign keys' => 
      array (
        'phenotype' => 
          array (
            'table' => 'phenotype',
            'columns' => 
            array (
              'phenotype_id' => 'phenotype_id',
            ),
          ),
        'cvterm' => 
          array (
            'table' => 'cvterm',
            'columns' => 
            array (
              'cvterm_id' => 'type_id',
            ),
          ),
      ),
    
    'indexes' => 
      array (
        'phenotypeprop_idx1' => 
        array (
          0 => 'phenotype_id',
        ),
        'phenotypeprop_idx2' => 
        array (
          0 => 'type_id',
        ),
        'phenotypeprop_idx3' => 
        array (
          0 => 'cvalue_id',
        ),
      ),
  );
  chado_create_custom_table('phenotypeprop', $schema);

  // Custom table: project_phenotype
  $schema = array (
    'table' => 'project_phenotype',
    'fields' => 
      array (
        'project_phenotype_id' =>
        array (
         'type' => 'serial',
          'not null' => true,
        ),
        'project_id' => 
        array (
          'type' => 'int',
          'not null' => true,
        ),
        'phenotype_id' => 
        array (
          'type' => 'int',
          'not null' => true,
        ),
      ),
    
    'indexes' => 
      array (
        'project_phenotype_indx1' => 
        array (
          0 => 'project_id',
        ),
        'project_phenotype_indx2' => 
        array (
          0 => 'phenotype_id',
        ),
      ),
    'foreign keys' => 
      array (
        'project' => 
        array (
          'table' => 'project',
          'columns' => 
          array (
            'project_id' => 'project_id',
          ),
        ),
        'phenotype' => 
        array (
          'table' => 'phenotype',
          'columns' => 
          array (
            'phenotype_id' => 'phenotype_id',
          ),
        ),
      ),
    'primary key' => 
      array (
        0 => 'project_phenotype_id',
      ),
  );
  chado_create_custom_table('project_phenotype', $schema);
}//legume_stock_create_custom_tables


function legume_stock_create_MView() {
  // Populate SQL
  $sql_query="
      SELECT cs.nid, s.stock_id, s.name AS stockname, t.name AS stocktype,
             o.organism_id, o.common_name, o.genus, o.species,
             ARRAY_AGG(sc.name) AS collection
      FROM stock s
        INNER JOIN public.chado_stock cs ON cs.stock_id=s.stock_id
        INNER JOIN organism o ON o.organism_id=s.organism_id
        INNER JOIN cvterm t ON t.cvterm_id=s.type_id
        LEFT JOIN stockcollection_stock ss ON ss.stock_id=s.stock_id
        LEFT JOIN stockcollection sc ON sc.stockcollection_id=ss.stockcollection_id
      GROUP BY cs.nid, s.stock_id, s.name, t.name, o.organism_id, o.common_name, o.genus, o.species
      ORDER BY s.name";
        
  // MView definition
  $schema = array(
    'table' => 'stock_search',
    'fields' => array(
        'nid' => array(
          'type' => 'int',
          'not null' => false,
        ),
        'stock_id' => array(
          'type' => 'int',
          'not null' => false,
        ),
        'stockname' => array(
          'type' => 'text',
          'not null' => false,
        ),
        'stocktype' => array(
          'type' => 'text',
          'not null' => false,
        ),
        'organism_id' => array(
          'type' => 'int',
          'not null' => false,
        ),
        'common_name' => array(
          'type' => 'text',
          'not null' => false,
        ),
        'genus' => array(
          'type' => 'text',
          'not null' => false,
        ),
        'species' => array(
          'type' => 'text',
          'not null' => false,
        ),
        'collection' => array(
          'type' => 'text',
          'not null' => false,
        ),
    ),
    
    'unique' => array(
      'stock_id_collection' => array('stock_id', 'collection'),
    ),

    'indexes' => array(
        'stock_search_indx0' => array(
            0 => 'common_name',
        ),
        'stock_search_indx1' => array(
            0 => 'stocktype',
        ),
        'stock_search_indx2' => array(
            0 => 'collection',
        ),
    ),
  );

  // add a comment to make sure this view makes sense to the site administator
  $comment = t('This view is used to provide a table for searching stock records.');
  
  tripal_add_mview(
    'stock_search',  // name of materialized view
    'legume_stock',  // name of module submitting view
    $schema,         // schema api array representation
    $sql_query,      // sql query that loads the mview
    $comment 
  );
}//legume_stock_create_MView


function legume_stock_create_Integration() {
  $integration = array(
    'table' => 'stock_search',
    'name' => 'stock_search',
    'type' => 'chado',
    'description' => 'Stock search MView integration',
    'priority' => '-1',
    'base_table' => '1',
    'fields' => array(
      'nid' => array (
        'name' => 'nid',
        'title' => 'nid',
        'description' => 'Node ID',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'views_handler_filter_numeric',
          ),
          'field' => array (
            'name' => 'views_handler_field_numeric',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_numeric',
          ),
        ),
        'joins' => array (
        ),
      ),//nid
      
      'stock_id' => array(
          'name' => 'stock_id',
          'title' => 'stock_id',
          'description' => 'Stock ID',
          'type' => 'int',
          'handlers' => array(
              'filter' => array(
                  'name' => 'views_handler_filter_numeric',
              ),
              'field' => array(
                  'name' => 'views_handler_field_numeric',
              ),
              'sort' => array(
                  'name' => 'views_handler_sort',
              ),
              'argument' => array(
                  'name' => 'views_handler_argument_numeric',
              ),
              'relationship' => array(
                  'name' => 'views_handler_relationship',
              ),
          ),
          'joins' => array(
          ),
      ),//stock_id
            
      'stockname' => array (
        'name' => 'stockname',
        'title' => 'Name',
        'description' => 'Name',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
        ),
        'joins' => array (
        ),
      ),//stockname

      'stocktype' => array (
        'name' => 'stocktype',
        'title' => 'Stock Type',
        'description' => 'Stock Type',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
        ),
        'joins' => array (
        ),
      ),//stocktype

      'organism_id' => array (
        'name' => 'organism_id',
        'title' => 'organism_id',
        'description' => 'Organism ID',
        'type' => 'int',
        'handlers' => array (
          'filter' => array (
            'name' => 'views_handler_filter_numeric',
          ),
          'field' => array (
            'name' => 'views_handler_field_numeric',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_numeric',
          ),
        ),
        'joins' => array (
        ),
      ),//organism_id
      
      'common_name' => array (
        'name' => 'common_name',
        'title' => 'Common Name',
        'description' => 'Common name',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
        ),
        'joins' => array (
        ),
      ),//abbreviation
      
      'genus' => array(
          'name' => 'genus',
          'title' => 'Genus',
          'description' => 'Genus',
          'type' => 'text',
          'handlers' => array(
              'filter' => array(
                  'name' => 'tripal_views_handler_filter_select_string',
              ),
              'field' => array(
                  'name' => 'views_handler_field',
              ),
              'sort' => array(
                  'name' => 'views_handler_sort',
              ),
              'argument' => array(
                  'name' => 'views_handler_argument_string',
              ),
              'relationship' => array(
                  'name' => 'views_handler_relationship',
              ),
          ),
          'joins' => array(
          ),
      ),//genus
            
      'species' => array(
          'name' => 'species',
          'title' => 'Species',
          'description' => 'species',
          'type' => 'text',
          'handlers' => array(
              'filter' => array(
                  'name' => 'tripal_views_handler_filter_select_string',
              ),
              'field' => array(
                  'name' => 'views_handler_field',
              ),
              'sort' => array(
                  'name' => 'views_handler_sort',
              ),
              'argument' => array(
                  'name' => 'views_handler_argument_string',
              ),
              'relationship' => array(
                  'name' => 'views_handler_relationship',
              ),
          ),
          'joins' => array(
          ),
      ),//species

      'collection' => array (
        'name' => 'collection',
        'title' => 'Collection',
        'description' => 'Collection',
        'type' => 'text',
        'handlers' => array (
          'filter' => array (
            'name' => 'tripal_views_handler_filter_select_string',
          ),
          'field' => array (
            'name' => 'views_handler_field',
          ),
          'sort' => array (
            'name' => 'views_handler_sort',
          ),
          'argument' => array (
            'name' => 'views_handler_argument_string',
          ),
        ),
        'joins' => array (
        ),
      ),//collection

    ),
  );
  
  // Add the array above that will integrate our qtl_search materialized view
  //   for use with Drupal Views
  tripal_add_views_integration($integration);
}//legume_stock_create_Integration


