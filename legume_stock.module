<?php
/**
 * @file
 * This file contains all Drupal hooks for the module other than any
 * node hooks and block hooks. Those go in the [module name].chado_node.inc file
 * and [module_name].blocks.inc respectively
 *
 * @ingroup legume_stock
 */

require_once('includes/legume_stock.chado_node.inc');

function legume_stock_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'legume_stock');

  $items = array(
    'tripal_stock_base' => array(
      'variables' => array('node' => NULL),
      'template' => 'tripal_legume_stock_base',
      'path' => "$path/theme/templates",
    ),

  );

  return $items;
}//legume_stock_theme


/**
  * hook_form_alter
  *
  * Add a validator to the search form.
  */
function legume_stock_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && strstr($form['#id'], 'stock')) {
    // Set form validator
    $form['#validate'][] = 'legume_stock_form_validate';
    
    // Pretty-up the species dropdown
    // NOTE THAT THIS IS SPECIFIC TO PEANUTBASE!
    unset($form['organism_common_name']['#options']['All']);
    unset($form['organism_common_name']['#options']['Cultivated peanut']);
    unset($form['organism_common_name']['#options']['Hybrid peanut']);
    unset($form['organism_common_name']['#options']['multiple peanut species']);
    $form['organism_common_name']['#options'] 
        = array_merge(Array('All'                     => '- Any -',
                            'Cultivated peanut'                  =>' Cultivated peanut',
                            'Hybrid peanut'           => 'Hybrid peanut', 
                            'multiple peanut species' => 'Unspecified Arachis'),
                      $form['organism_common_name']['#options']);
    
    // Add a mini core checkbox
    // NOTE THAT THIS IS SPECIFIC TO PEANUTBASE!
    $form['trait-MINI_CORE'] = array(
      '#type'          => 'checkbox',
      '#title'         => t('US Mini Core Collection'),
      '#default_value' => 'MINI_CORE',
    );
  
//drupal_set_message("FORM:\n<pre>".print_r($form, true)."</pre>");  
    // Change default value for submit button
    $form['submit']['#value'] = 'Search';
  }

}//legume_stock_form_alter


function legume_stock_views_pre_render($view) {
//drupal_set_message("PRE RENDER VIEW:\n<pre>".print_r($view, true)."</pre>");
  if (strstr($view->name, 'stocks')) {  // Report QTL found before table
    if (isset($view->query->pager)) {
      $view->attachment_before = "<p><b>Found " . $view->query->pager->get_total_items() . " stocks</b></p>";
    }
  }
  
  $search_term = $view->exposed_raw_input['name'];

  foreach ($view->result as $r) {
//drupal_set_message("RESULT:\n<pre>".print_r($r, true)."</pre>");
  }
}//legume_qtl_views_pre_render

/**
  * Form validator for search form. 
  * Use this to trim whitespace from text fields.
  */
function legume_stock_form_validate($form, &$form_state) {
  // trim whitespace from all text fields;
  if (isset($form_state['values']['name']))
    $form_state['values']['name'] = trim($form_state['values']['name']);
}//legume_stock_form_validate



/**
  * hook_views_default_views_alter()
  * Alter the default tripal_stock view.
  */
function legume_stock_views_default_views_alter(&$views) {
//drupal_set_message("STOCK VIEW:<pre>".print_r($views['tripal_stock_user_stocks'], true)."</pre>");
//drupal_set_message("STOCK VIEW DISPLAY:<pre>".print_r($views['tripal_stock_user_stocks']->display, true)."</pre>");
  $handler =& $views['tripal_stock_user_stocks']->display['default']->handler;
  
  // Remove "uniquename from results table
//drupal_set_message("FIELDS:\n <pre>".print_r($handler->display->display_options['fields'], true)."</pre>");
  $handler->display->display_options['fields']['uniquename']['exclude'] = 1;
  
//drupal_set_message("FILTERS:\n <pre>".print_r($views['tripal_stock_user_stocks']->display['default']->handler->display->display_options['filters'], true)."</pre>");
}//legume_stock_views_default_views_alter


/**
  * hook_views_query_alter()
  * Alter the search query before executing.
  */
function legume_stock_views_query_alter(&$view, &$query) {
//drupal_set_message("QUERY before:\n<pre>".print_r($query, true)."</pre>");
//drupal_set_message("EXPOSED INPUT:\n<pre>".print_r($view->exposed_input, true)."</pre>");

  if ($query->base_table != 'stock') {
    return;
  }
  
  // Will be rebuilding the where clause
  $query->where = array();

  // Build organism clause
  if ($view->exposed_input['organism_common_name']
        && $view->exposed_input['organism_common_name'] != 'All') {
    $query->where[] = array(
      'conditions' => array(
        array(
          'field'    => 'organism.common_name', 
          'value'    => $view->exposed_input['organism_common_name'],
          'operator' => '='),
      ),
      'args' => array(),
      'type' => 'AND',
    );
  }//organism_common_name
  
  // Build stock type clause
  if ($view->exposed_input['type_id'] && $view->exposed_input['type_id'] != 'All') {
    $query->where[] = array(
      'conditions' => array(
        array(
          'field'    => 'stock.type_id', 
          'value'    => $view->exposed_input['type_id'],
          'operator' => '='),
      ),
      'args' => array(),
      'type' => 'AND',
    );
  }//type_id

  // build stock name clause; check stock name and synonym
  if ($view->exposed_input['name']) {
  
    // Get cvterm_id for 'alias'
    $sql = "
      SELECT cvterm_id FROM {cvterm} 
      WHERE name='alias' AND cv_id=(SELECT cv_id FROM {cv} WHERE name='germplasm')";
    if ($result = chado_query($sql, array())) {
      foreach ($result as $r) {
        $synonym_id = $r->cvterm_id;
      }
    }

    // Join cvterm to stock.type_id: stock.type_id
    $join = new views_join();
    $join->table      = 'stockprop';
    $join->field      = 'stock_id';
    $join->left_table = 'stock';
    $join->left_field = 'stock_id';
    $join->alias      = 'synonym';
    $join->type       = 'LEFT';
    $join->extra      = array(
      array('field' => 'type_id', 'value' => $synonym_id),
    );
    $query->add_relationship('synonym', $join, 'stockprop');

    $name = str_replace('_', '\\_', $view->exposed_input['name']);
    $name = str_replace('%', '\\%', $name);
    $query->where[] = array(
      'conditions' => array(
        array(
          'field'    => 'synonym.value', 
          'value'    => "%$name%",
          'operator' => 'LIKE'),
        array(
          'field'    => 'stock.name', 
          'value'    => "%$name%",
          'operator' => 'LIKE'),
      ),
      'args' => array(),
      'type' => 'OR',
    );

    $query->where[0]['type'] = 'OR';
  }//name

  // Filter by collection
  $mini_core = false;
  if (isset($view->exposed_input['trait-MINI_CORE'])
        && $view->exposed_input['trait-MINI_CORE'] == '1') {
    $mini_core = true;

    $sql = "
      SELECT cvterm_id FROM {cvterm} 
      WHERE name='MINI_CORE' AND cv_id=(SELECT cv_id FROM {cv} 
                                        WHERE name='GRIN_descriptors')";
    if ($result = chado_query($sql, array())) {
      foreach ($result as $r) {
        $minicore_id = $r->cvterm_id;
      }
    }
    
    // Will need these joins
    $join = new views_join();
    $join->table      = 'stockprop';
    $join->field      = 'stock_id';
    $join->left_table = 'stock';
    $join->left_field = 'stock_id';
    $join->alias      = 'minicore';
    $join->type       = 'LEFT';
    $join->definition = array(
      'left_field' => 'stock_id',
      'field'      => 'stock_id',
      'handler'    => 'views_handler_join',
      'table'      => 'stockprop',
      'left_table' => 'stock',
    );
    $join->extra      = array(
      array('field' => 'type_id', 'value' => $minicore_id),
    );
    $query->add_relationship('minicore', $join, 'stockprop');
    
    // Add mini-core to where clause if checked
    $query->where[] = array(
      'conditions' => array(
        array(
          'field'    => 'minicore.value',
          'value'    => 'yes',
          'operator' => '=',
        ),
      ),
      'args' => array(),
      'type' => 'AND',
    );
  }//mini-core selected

  // Only want one of each stock found
  $query->set_distinct(true, true);


  // Default: order by stock name
  $query->orderby[0] = array(
    'field' => 'stock_name',
    'direction' => 'ASC',
  );
  
//drupal_set_message("QUERY AFTER MODIFICATION:\n<pre>".print_r($query, true)."</pre>");
}//legume_stock_views_query_alter


